{"ast":null,"code":"const {\n  Client\n} = require('pg');\nconst fs = require('fs');\nconst readline = require('readline');\n\n// Настройки подключения к базе данных\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'elstation',\n  password: 'root',\n  port: 5432 // стандартный порт для PostgreSQL\n});\nasync function insertDataFromFile(filePath) {\n  try {\n    await client.connect();\n    console.log(\"Connected to the database.\");\n    const fileStream = fs.createReadStream(filePath);\n    const rl = readline.createInterface({\n      input: fileStream,\n      crlfDelay: Infinity\n    });\n    let lineNumber = 1;\n    for await (const line of rl) {\n      const data = line.split(',');\n      if (data.length < 3) {\n        console.error(`Incorrect data format in line ${lineNumber}: ${line}`);\n        lineNumber++;\n        continue;\n      }\n      const adress = data[0].replace(/\"/g, '').trim(); // Удаляем кавычки и обрезаем пробелы\n      const latitude = parseFloat(data[1].replace(/\"/g, '')); // Преобразуем в число, удаляя кавычки\n      const longitude = parseFloat(data[2].replace(/\"/g, '')); // Преобразуем в число, удаляя кавычки\n\n      const insertQuery = `INSERT INTO stations (adress, latitude, longitude) VALUES ($1, $2, $3)`;\n      await client.query(insertQuery, [adress, latitude, longitude]);\n      console.log(`Inserted Adress: ${adress}, Latitude: ${latitude}, Longitude: ${longitude} into stations}`);\n      lineNumber++;\n    }\n    console.log(\"All data inserted successfully.\");\n  } catch (err) {\n    console.error('Error executing query', err.stack);\n  } finally {\n    await client.end();\n    console.log(\"Disconnected from the database.\");\n  }\n}\ninsertDataFromFile(filePath);","map":{"version":3,"names":["Client","require","fs","readline","client","user","host","database","password","port","insertDataFromFile","filePath","connect","console","log","fileStream","createReadStream","rl","createInterface","input","crlfDelay","Infinity","lineNumber","line","data","split","length","error","adress","replace","trim","latitude","parseFloat","longitude","insertQuery","query","err","stack","end"],"sources":["C:/Users/Disve/Desktop/яндекс карты/1/YandexMap1212312/client/src/addButtonAZS.js"],"sourcesContent":["const { Client } = require('pg');\r\nconst fs = require('fs');\r\nconst readline = require('readline');\r\n\r\n// Настройки подключения к базе данных\r\nconst client = new Client({\r\n    user: 'postgres',\r\n    host: 'localhost',\r\n    database: 'elstation',\r\n    password: 'root',\r\n    port: 5432, // стандартный порт для PostgreSQL\r\n});\r\n\r\nasync function insertDataFromFile(filePath) {\r\n  try {\r\n    await client.connect();\r\n    console.log(\"Connected to the database.\");\r\n    \r\n    const fileStream = fs.createReadStream(filePath);\r\n    const rl = readline.createInterface({\r\n      input: fileStream,\r\n      crlfDelay: Infinity\r\n    });\r\n\r\n    let lineNumber = 1;\r\n    for await (const line of rl) {\r\n      const data = line.split(',');\r\n\r\n      if (data.length < 3) {\r\n        console.error(`Incorrect data format in line ${lineNumber}: ${line}`);\r\n        lineNumber++;\r\n        continue;\r\n      }\r\n\r\n      const adress = data[0].replace(/\"/g, '').trim(); // Удаляем кавычки и обрезаем пробелы\r\n      const latitude = parseFloat(data[1].replace(/\"/g, '')); // Преобразуем в число, удаляя кавычки\r\n      const longitude = parseFloat(data[2].replace(/\"/g, '')); // Преобразуем в число, удаляя кавычки\r\n\r\n      const insertQuery = `INSERT INTO stations (adress, latitude, longitude) VALUES ($1, $2, $3)`;\r\n      await client.query(insertQuery, [adress, latitude, longitude]);\r\n\r\n      console.log(`Inserted Adress: ${adress}, Latitude: ${latitude}, Longitude: ${longitude} into stations}`);\r\n      lineNumber++;\r\n    }\r\n\r\n    console.log(\"All data inserted successfully.\");\r\n  } catch (err) {\r\n    console.error('Error executing query', err.stack);\r\n  } finally {\r\n    await client.end();\r\n    console.log(\"Disconnected from the database.\");\r\n  }\r\n}\r\n\r\ninsertDataFromFile(filePath);\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAChC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA,MAAMG,MAAM,GAAG,IAAIJ,MAAM,CAAC;EACtBK,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE,WAAW;EACrBC,QAAQ,EAAE,MAAM;EAChBC,IAAI,EAAE,IAAI,CAAE;AAChB,CAAC,CAAC;AAEF,eAAeC,kBAAkBA,CAACC,QAAQ,EAAE;EAC1C,IAAI;IACF,MAAMP,MAAM,CAACQ,OAAO,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAEzC,MAAMC,UAAU,GAAGb,EAAE,CAACc,gBAAgB,CAACL,QAAQ,CAAC;IAChD,MAAMM,EAAE,GAAGd,QAAQ,CAACe,eAAe,CAAC;MAClCC,KAAK,EAAEJ,UAAU;MACjBK,SAAS,EAAEC;IACb,CAAC,CAAC;IAEF,IAAIC,UAAU,GAAG,CAAC;IAClB,WAAW,MAAMC,IAAI,IAAIN,EAAE,EAAE;MAC3B,MAAMO,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;MAE5B,IAAID,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;QACnBb,OAAO,CAACc,KAAK,CAAC,iCAAiCL,UAAU,KAAKC,IAAI,EAAE,CAAC;QACrED,UAAU,EAAE;QACZ;MACF;MAEA,MAAMM,MAAM,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACjD,MAAMC,QAAQ,GAAGC,UAAU,CAACR,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACxD,MAAMI,SAAS,GAAGD,UAAU,CAACR,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;MAEzD,MAAMK,WAAW,GAAG,wEAAwE;MAC5F,MAAM9B,MAAM,CAAC+B,KAAK,CAACD,WAAW,EAAE,CAACN,MAAM,EAAEG,QAAQ,EAAEE,SAAS,CAAC,CAAC;MAE9DpB,OAAO,CAACC,GAAG,CAAC,oBAAoBc,MAAM,eAAeG,QAAQ,gBAAgBE,SAAS,iBAAiB,CAAC;MACxGX,UAAU,EAAE;IACd;IAEAT,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD,CAAC,CAAC,OAAOsB,GAAG,EAAE;IACZvB,OAAO,CAACc,KAAK,CAAC,uBAAuB,EAAES,GAAG,CAACC,KAAK,CAAC;EACnD,CAAC,SAAS;IACR,MAAMjC,MAAM,CAACkC,GAAG,CAAC,CAAC;IAClBzB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD;AACF;AAEAJ,kBAAkB,CAACC,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}