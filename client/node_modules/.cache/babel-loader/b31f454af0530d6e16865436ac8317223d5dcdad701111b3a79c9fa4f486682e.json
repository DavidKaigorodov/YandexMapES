{"ast":null,"code":"export const handleStationButtonClick = (mapRef, stationPlacemarks, filters) => {\n  // Сначала очищаем метки, чтобы не дублировать при следующем запросе.\n  clearStations(mapRef, stationPlacemarks);\n\n  // Теперь загружаем данные в зависимости от выбранных фильтров.\n  fetchStationData(mapRef, stationPlacemarks, filters);\n};\nconst fetchStationData = (mapRef, stationPlacemarks, filters) => {\n  fetch('http://localhost:5000/api/Station').then(response => response.json()).then(data => {\n    // Фильтрация данных в зависимости от выбранных критериев.\n    const filteredData = data.filter(coord => {\n      const matchesAll = filters.includes('all');\n\n      // Фильтры по количеству портов\n      const connectorCriteria = [filters.includes('connector1') && coord.connectors_total === 1, filters.includes('connector2') && coord.connectors_total === 2, filters.includes('connector3') && coord.connectors_total === 3];\n\n      // Фильтры по типу зарядной станции\n      const matchesSlow = filters.includes('slow') && coord.evse_type === false; // Медленная зарядная станция\n      const matchesFast = filters.includes('fast') && coord.evse_type === true; // Быстрая зарядная станция\n\n      // Если выбрано \"Показать все\", то возвращаем true\n      if (matchesAll) return true;\n\n      // Условие для отображения зарядных станций\n      const matchesConnectorCriteria = connectorCriteria.some(Boolean);\n      const matchesTypeCriteria = matchesSlow || matchesFast;\n      if (matchesFast || matchesSlow) {\n        return matchesConnectorCriteria && (matchesSlow || matchesFast);\n      }\n\n      // Возвращаем true только если совпадают и тип, и количество портов\n      return matchesConnectorCriteria || matchesSlow || matchesFast;\n    });\n\n    // Добавляем метки на карту для отфильтрованных данных.\n    filteredData.forEach(coord => {\n      const placemark = new window.ymaps.Placemark([coord.latitude, coord.longitude], {\n        hintContent: coord.adress\n      });\n      stationPlacemarks.current.push(placemark);\n      mapRef.current.geoObjects.add(placemark);\n    });\n  }).catch(error => {\n    console.error('Error fetching station data:', error);\n  });\n};\nconst clearStations = (mapRef, objectsAdded1) => {\n  objectsAdded1.current.forEach(placemark => {\n    mapRef.current.geoObjects.remove(placemark);\n  });\n  objectsAdded1.current = [];\n};","map":{"version":3,"names":["handleStationButtonClick","mapRef","stationPlacemarks","filters","clearStations","fetchStationData","fetch","then","response","json","data","filteredData","filter","coord","matchesAll","includes","connectorCriteria","connectors_total","matchesSlow","evse_type","matchesFast","matchesConnectorCriteria","some","Boolean","matchesTypeCriteria","forEach","placemark","window","ymaps","Placemark","latitude","longitude","hintContent","adress","current","push","geoObjects","add","catch","error","console","objectsAdded1","remove"],"sources":["C:/Users/Disve/Desktop/YandexMap ES/client/src/StationHandler.js"],"sourcesContent":["export const handleStationButtonClick = (mapRef, stationPlacemarks, filters) => {\r\n  // Сначала очищаем метки, чтобы не дублировать при следующем запросе.\r\n  clearStations(mapRef, stationPlacemarks);\r\n\r\n  // Теперь загружаем данные в зависимости от выбранных фильтров.\r\n  fetchStationData(mapRef, stationPlacemarks, filters);\r\n};\r\n\r\nconst fetchStationData = (mapRef, stationPlacemarks, filters) => {\r\n  fetch('http://localhost:5000/api/Station')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          // Фильтрация данных в зависимости от выбранных критериев.\r\n          const filteredData = data.filter(coord => {\r\n              const matchesAll = filters.includes('all');\r\n\r\n              // Фильтры по количеству портов\r\n              const connectorCriteria = [\r\n                  filters.includes('connector1') && coord.connectors_total === 1,\r\n                  filters.includes('connector2') && coord.connectors_total === 2,\r\n                  filters.includes('connector3') && coord.connectors_total === 3\r\n              ];\r\n\r\n              // Фильтры по типу зарядной станции\r\n              const matchesSlow = filters.includes('slow') && coord.evse_type === false; // Медленная зарядная станция\r\n              const matchesFast = filters.includes('fast') && coord.evse_type === true; // Быстрая зарядная станция\r\n\r\n              // Если выбрано \"Показать все\", то возвращаем true\r\n              if (matchesAll) return true;\r\n\r\n              // Условие для отображения зарядных станций\r\n              const matchesConnectorCriteria = connectorCriteria.some(Boolean);\r\n              const matchesTypeCriteria = (matchesSlow || matchesFast);\r\n              if (matchesFast || matchesSlow){\r\n               return matchesConnectorCriteria && (matchesSlow || matchesFast)\r\n              }\r\n\r\n              // Возвращаем true только если совпадают и тип, и количество портов\r\n              return matchesConnectorCriteria || matchesSlow || matchesFast;\r\n          });\r\n\r\n          // Добавляем метки на карту для отфильтрованных данных.\r\n          filteredData.forEach(coord => {\r\n              const placemark = new window.ymaps.Placemark(\r\n                  [coord.latitude, coord.longitude],\r\n                  { hintContent: coord.adress }\r\n              );\r\n\r\n              stationPlacemarks.current.push(placemark);\r\n              mapRef.current.geoObjects.add(placemark);\r\n          });\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching station data:', error);\r\n      });\r\n};\r\n\r\nconst clearStations = (mapRef, objectsAdded1) => {\r\n  objectsAdded1.current.forEach((placemark) => {\r\n      mapRef.current.geoObjects.remove(placemark);\r\n  });\r\n  objectsAdded1.current = [];\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,KAAK;EAC9E;EACAC,aAAa,CAACH,MAAM,EAAEC,iBAAiB,CAAC;;EAExC;EACAG,gBAAgB,CAACJ,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,CAAC;AACtD,CAAC;AAED,MAAME,gBAAgB,GAAGA,CAACJ,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,KAAK;EAC/DG,KAAK,CAAC,mCAAmC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV;IACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,MAAM,CAACC,KAAK,IAAI;MACtC,MAAMC,UAAU,GAAGX,OAAO,CAACY,QAAQ,CAAC,KAAK,CAAC;;MAE1C;MACA,MAAMC,iBAAiB,GAAG,CACtBb,OAAO,CAACY,QAAQ,CAAC,YAAY,CAAC,IAAIF,KAAK,CAACI,gBAAgB,KAAK,CAAC,EAC9Dd,OAAO,CAACY,QAAQ,CAAC,YAAY,CAAC,IAAIF,KAAK,CAACI,gBAAgB,KAAK,CAAC,EAC9Dd,OAAO,CAACY,QAAQ,CAAC,YAAY,CAAC,IAAIF,KAAK,CAACI,gBAAgB,KAAK,CAAC,CACjE;;MAED;MACA,MAAMC,WAAW,GAAGf,OAAO,CAACY,QAAQ,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACM,SAAS,KAAK,KAAK,CAAC,CAAC;MAC3E,MAAMC,WAAW,GAAGjB,OAAO,CAACY,QAAQ,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACM,SAAS,KAAK,IAAI,CAAC,CAAC;;MAE1E;MACA,IAAIL,UAAU,EAAE,OAAO,IAAI;;MAE3B;MACA,MAAMO,wBAAwB,GAAGL,iBAAiB,CAACM,IAAI,CAACC,OAAO,CAAC;MAChE,MAAMC,mBAAmB,GAAIN,WAAW,IAAIE,WAAY;MACxD,IAAIA,WAAW,IAAIF,WAAW,EAAC;QAC9B,OAAOG,wBAAwB,KAAKH,WAAW,IAAIE,WAAW,CAAC;MAChE;;MAEA;MACA,OAAOC,wBAAwB,IAAIH,WAAW,IAAIE,WAAW;IACjE,CAAC,CAAC;;IAEF;IACAT,YAAY,CAACc,OAAO,CAACZ,KAAK,IAAI;MAC1B,MAAMa,SAAS,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,SAAS,CACxC,CAAChB,KAAK,CAACiB,QAAQ,EAAEjB,KAAK,CAACkB,SAAS,CAAC,EACjC;QAAEC,WAAW,EAAEnB,KAAK,CAACoB;MAAO,CAChC,CAAC;MAED/B,iBAAiB,CAACgC,OAAO,CAACC,IAAI,CAACT,SAAS,CAAC;MACzCzB,MAAM,CAACiC,OAAO,CAACE,UAAU,CAACC,GAAG,CAACX,SAAS,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACxD,CAAC,CAAC;AACR,CAAC;AAED,MAAMnC,aAAa,GAAGA,CAACH,MAAM,EAAEwC,aAAa,KAAK;EAC/CA,aAAa,CAACP,OAAO,CAACT,OAAO,CAAEC,SAAS,IAAK;IACzCzB,MAAM,CAACiC,OAAO,CAACE,UAAU,CAACM,MAAM,CAAChB,SAAS,CAAC;EAC/C,CAAC,CAAC;EACFe,aAAa,CAACP,OAAO,GAAG,EAAE;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}