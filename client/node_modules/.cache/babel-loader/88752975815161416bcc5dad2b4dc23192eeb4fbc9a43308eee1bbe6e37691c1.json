{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Disve\\\\Desktop\\\\YandexMap ES\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { handleFileInputChange, handleFileInputChange2 } from './addFiles.js';\nimport { handleZoneButtonClick } from './zoneHandler.js';\nimport { handleStationButtonClick } from './StationHandler.js';\nimport SettingsModal from './SettingsModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YandexMap = () => {\n  _s();\n  const [mapInitiated, setMapInitiated] = useState(false);\n  const mapRef = useRef(null);\n  const stationPlacemarks = useRef([]);\n  const [zoneRectangles, setZoneRectangles] = useState([]);\n  const [objectsAdded, setObjectsAdded] = useState(false);\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n  const [polygonSettings, setPolygonSettings] = useState({\n    color0: 'rgba(255, 0, 0, 0.5)',\n    color0_5: 'rgba(255, 255, 0, 0.5)',\n    color5: 'rgba(0, 255, 0, 0.5)',\n    opacity: 0.5\n  });\n  useEffect(() => {\n    const apiKey = 'a0325676-108c-4a26-8b08-8ddbcf9ee724';\n    const initializeMap = () => {\n      if (!window.ymaps) {\n        const script = document.createElement('script');\n        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;\n        script.onload = () => {\n          if (mapInitiated) return;\n          const mapContainer = document.getElementById('map');\n          if (mapContainer) {\n            mapContainer.innerHTML = '';\n            window.ymaps.ready(() => {\n              mapRef.current = new window.ymaps.Map(\"map\", {\n                center: [55.76, 37.64],\n                zoom: 10,\n                controls: []\n              });\n              mapRef.current.controls.add('zoomControl', {\n                position: {\n                  top: 10,\n                  left: 10\n                }\n              });\n              mapRef.current.controls.add('typeSelector', {\n                position: {\n                  top: 10,\n                  right: 10\n                }\n              });\n              setMapInitiated(true);\n              fetchZoneData(); // Получаем данные о зонах сразу после инициализации карты\n            });\n          }\n        };\n        if (!document.querySelector('script[src^=\"https://api-maps.yandex.ru/2.1/\"]')) {\n          document.body.appendChild(script);\n        }\n      }\n    };\n    initializeMap();\n  }, [mapInitiated]);\n  const fetchZoneData = () => {\n    fetch('http://localhost:5000/api/Zone').then(response => response.json()).then(data => {\n      updatePolygons(data);\n    }).catch(error => {\n      console.error('Ошибка при получении данных полигонов:', error);\n    });\n  };\n  const updatePolygons = data => {\n    if (mapRef.current) {\n      // Удаляем старые полигоны\n      zoneRectangles.forEach(rectangle => {\n        mapRef.current.geoObjects.remove(rectangle);\n      });\n      setZoneRectangles([]); // Сбрасываем состояние\n\n      const polygonLayers = data.map(item => {\n        const {\n          polygon,\n          rating\n        } = item;\n        if (polygon && polygon.coordinates) {\n          return processPolygon(polygon.coordinates, rating, polygonSettings); // Передаем настройки\n        }\n        return null;\n      }).filter(layer => layer !== null);\n      polygonLayers.forEach(layer => {\n        mapRef.current.geoObjects.add(layer);\n        setZoneRectangles(prev => [...prev, layer]); // Сохраняем новые полигоны в состоянии\n      });\n    }\n  };\n  const handleSaveSettings = settings => {\n    setPolygonSettings(settings);\n    updatePolygonsWithNewSettings(settings); // Обновляем полигоны с новыми настройками сразу\n  };\n  const updatePolygonsWithNewSettings = settings => {\n    zoneRectangles.forEach(rectangle => {\n      const properties = rectangle.properties.getAll();\n      const rating = parseFloat(properties.balloonContent.split(': ')[1]); // Извлекаем рейтинг из balloonContent\n      rectangle.options.set({\n        fillColor: getRatingColor(rating, settings),\n        opacity: settings.opacity\n      }); // Обновляем цвет и прозрачность\n    });\n  };\n  const handleUpdatePolygons = () => {\n    fetchZoneData(); // Обновляем полигоны при нажатии кнопки\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0442\\u0435 \\u042D\\u0417\\u0421:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"header-button\",\n        onChange: handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0442\\u0435 \\u0437\\u043E\\u043D\\u044B:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"header-button\",\n        onChange: handleFileInputChange2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baton\",\n          onClick: () => handleStationButtonClick(mapRef, stationPlacemarks),\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0441\\u0442\\u0430\\u043D\\u0446\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baton\",\n          onClick: () => handleZoneButtonClick(mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded),\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0437\\u043E\\u043D\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baton\",\n          onClick: () => setSettingsModalOpen(true),\n          children: \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u043F\\u043E\\u043B\\u0438\\u0433\\u043E\\u043D\\u043E\\u0432\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map\",\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n        isOpen: settingsModalOpen,\n        onClose: () => setSettingsModalOpen(false),\n        onSaveSettings: handleSaveSettings,\n        onUpdatePolygons: handleUpdatePolygons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(YandexMap, \"ERoeqae3vY3rJlUhAsxmIP1GlVQ=\");\n_c = YandexMap;\nexport default YandexMap;\nvar _c;\n$RefreshReg$(_c, \"YandexMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","handleFileInputChange","handleFileInputChange2","handleZoneButtonClick","handleStationButtonClick","SettingsModal","jsxDEV","_jsxDEV","YandexMap","_s","mapInitiated","setMapInitiated","mapRef","stationPlacemarks","zoneRectangles","setZoneRectangles","objectsAdded","setObjectsAdded","settingsModalOpen","setSettingsModalOpen","polygonSettings","setPolygonSettings","color0","color0_5","color5","opacity","apiKey","initializeMap","window","ymaps","script","document","createElement","src","onload","mapContainer","getElementById","innerHTML","ready","current","Map","center","zoom","controls","add","position","top","left","right","fetchZoneData","querySelector","body","appendChild","fetch","then","response","json","data","updatePolygons","catch","error","console","forEach","rectangle","geoObjects","remove","polygonLayers","map","item","polygon","rating","coordinates","processPolygon","filter","layer","prev","handleSaveSettings","settings","updatePolygonsWithNewSettings","properties","getAll","parseFloat","balloonContent","split","options","set","fillColor","getRatingColor","handleUpdatePolygons","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","isOpen","onClose","onSaveSettings","onUpdatePolygons","_c","$RefreshReg$"],"sources":["C:/Users/Disve/Desktop/YandexMap ES/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { handleFileInputChange, handleFileInputChange2 } from './addFiles.js';\nimport { handleZoneButtonClick } from './zoneHandler.js';\nimport { handleStationButtonClick } from './StationHandler.js';\nimport SettingsModal from './SettingsModal';\n\nconst YandexMap = () => {\n  const [mapInitiated, setMapInitiated] = useState(false);\n  const mapRef = useRef(null);\n  const stationPlacemarks = useRef([]);\n  const [zoneRectangles, setZoneRectangles] = useState([]);\n  const [objectsAdded, setObjectsAdded] = useState(false);\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n  const [polygonSettings, setPolygonSettings] = useState({\n    color0: 'rgba(255, 0, 0, 0.5)',\n    color0_5: 'rgba(255, 255, 0, 0.5)',\n    color5: 'rgba(0, 255, 0, 0.5)',\n    opacity: 0.5,\n  });\n\n  useEffect(() => {\n    const apiKey = 'a0325676-108c-4a26-8b08-8ddbcf9ee724';\n\n    const initializeMap = () => {\n      if (!window.ymaps) {\n        const script = document.createElement('script');\n        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;\n        script.onload = () => {\n          if (mapInitiated) return;\n\n          const mapContainer = document.getElementById('map');\n          if (mapContainer) {\n            mapContainer.innerHTML = '';\n            window.ymaps.ready(() => {\n              mapRef.current = new window.ymaps.Map(\"map\", {\n                center: [55.76, 37.64],\n                zoom: 10,\n                controls: []\n              });\n\n              mapRef.current.controls.add('zoomControl', { position: { top: 10, left: 10 } });\n              mapRef.current.controls.add('typeSelector', { position: { top: 10, right: 10 } });\n\n              setMapInitiated(true);\n              fetchZoneData(); // Получаем данные о зонах сразу после инициализации карты\n            });\n          }\n        };\n\n        if (!document.querySelector('script[src^=\"https://api-maps.yandex.ru/2.1/\"]')) {\n          document.body.appendChild(script);\n        }\n      }\n    };\n\n    initializeMap();\n  }, [mapInitiated]);\n\n  const fetchZoneData = () => {\n    fetch('http://localhost:5000/api/Zone')\n      .then(response => response.json())\n      .then(data => {\n        updatePolygons(data);\n      })\n      .catch(error => {\n        console.error('Ошибка при получении данных полигонов:', error);\n      });\n  };\n\n  const updatePolygons = (data) => {\n    if (mapRef.current) {\n      // Удаляем старые полигоны\n      zoneRectangles.forEach(rectangle => {\n        mapRef.current.geoObjects.remove(rectangle);\n      });\n      setZoneRectangles([]); // Сбрасываем состояние\n\n      const polygonLayers = data.map(item => {\n        const { polygon, rating } = item;\n        if (polygon && polygon.coordinates) {\n          return processPolygon(polygon.coordinates, rating, polygonSettings); // Передаем настройки\n        }\n        return null;\n      }).filter(layer => layer !== null);\n\n      polygonLayers.forEach(layer => {\n        mapRef.current.geoObjects.add(layer);\n        setZoneRectangles(prev => [...prev, layer]); // Сохраняем новые полигоны в состоянии\n      });\n    }\n  };\n\n  const handleSaveSettings = (settings) => {\n    setPolygonSettings(settings);\n    updatePolygonsWithNewSettings(settings); // Обновляем полигоны с новыми настройками сразу\n  };\n\n  const updatePolygonsWithNewSettings = (settings) => {\n    zoneRectangles.forEach(rectangle => {\n      const properties = rectangle.properties.getAll();\n      const rating = parseFloat(properties.balloonContent.split(': ')[1]); // Извлекаем рейтинг из balloonContent\n      rectangle.options.set({ fillColor: getRatingColor(rating, settings), opacity: settings.opacity }); // Обновляем цвет и прозрачность\n    });\n  };\n\n  const handleUpdatePolygons = () => {\n    fetchZoneData(); // Обновляем полигоны при нажатии кнопки\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        Добавте ЭЗС:\n        <input\n          type=\"file\"\n          className=\"header-button\"\n          onChange={handleFileInputChange}\n        />\n        <br />\n        Добавте зоны:\n        <input\n          type=\"file\"\n          className=\"header-button\"\n          onChange={handleFileInputChange2}\n        />\n      </div>\n\n      <div className='content'>\n        <div className=\"controls\">\n          <div className='baton' onClick={() => handleStationButtonClick(mapRef, stationPlacemarks)}>Показать станции</div>\n          <div className='baton' onClick={() => handleZoneButtonClick(mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded)}>Показать зоны</div>\n          <div className='baton' onClick={() => setSettingsModalOpen(true)}>Настройки полигонов</div>\n        </div>\n        <div className=\"map\" id=\"map\"></div>\n\n        {/* Модальное окно */}\n        <SettingsModal\n          isOpen={settingsModalOpen}\n          onClose={() => setSettingsModalOpen(false)}\n          onSaveSettings={handleSaveSettings}\n          onUpdatePolygons={handleUpdatePolygons}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default YandexMap;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,eAAe;AAC7E,SAASC,qBAAqB,QAAQ,kBAAkB;AACxD,SAASC,wBAAwB,QAAQ,qBAAqB;AAC9D,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMa,MAAM,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMa,iBAAiB,GAAGb,MAAM,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC;IACrDuB,MAAM,EAAE,sBAAsB;IAC9BC,QAAQ,EAAE,wBAAwB;IAClCC,MAAM,EAAE,sBAAsB;IAC9BC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF3B,SAAS,CAAC,MAAM;IACd,MAAM4B,MAAM,GAAG,sCAAsC;IAErD,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;QACjB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/CF,MAAM,CAACG,GAAG,GAAG,0CAA0CP,MAAM,aAAa;QAC1EI,MAAM,CAACI,MAAM,GAAG,MAAM;UACpB,IAAIxB,YAAY,EAAE;UAElB,MAAMyB,YAAY,GAAGJ,QAAQ,CAACK,cAAc,CAAC,KAAK,CAAC;UACnD,IAAID,YAAY,EAAE;YAChBA,YAAY,CAACE,SAAS,GAAG,EAAE;YAC3BT,MAAM,CAACC,KAAK,CAACS,KAAK,CAAC,MAAM;cACvB1B,MAAM,CAAC2B,OAAO,GAAG,IAAIX,MAAM,CAACC,KAAK,CAACW,GAAG,CAAC,KAAK,EAAE;gBAC3CC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;gBACtBC,IAAI,EAAE,EAAE;gBACRC,QAAQ,EAAE;cACZ,CAAC,CAAC;cAEF/B,MAAM,CAAC2B,OAAO,CAACI,QAAQ,CAACC,GAAG,CAAC,aAAa,EAAE;gBAAEC,QAAQ,EAAE;kBAAEC,GAAG,EAAE,EAAE;kBAAEC,IAAI,EAAE;gBAAG;cAAE,CAAC,CAAC;cAC/EnC,MAAM,CAAC2B,OAAO,CAACI,QAAQ,CAACC,GAAG,CAAC,cAAc,EAAE;gBAAEC,QAAQ,EAAE;kBAAEC,GAAG,EAAE,EAAE;kBAAEE,KAAK,EAAE;gBAAG;cAAE,CAAC,CAAC;cAEjFrC,eAAe,CAAC,IAAI,CAAC;cACrBsC,aAAa,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC;UACJ;QACF,CAAC;QAED,IAAI,CAAClB,QAAQ,CAACmB,aAAa,CAAC,gDAAgD,CAAC,EAAE;UAC7EnB,QAAQ,CAACoB,IAAI,CAACC,WAAW,CAACtB,MAAM,CAAC;QACnC;MACF;IACF,CAAC;IAEDH,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACjB,YAAY,CAAC,CAAC;EAElB,MAAMuC,aAAa,GAAGA,CAAA,KAAM;IAC1BI,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZC,cAAc,CAACD,IAAI,CAAC;IACtB,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN,CAAC;EAED,MAAMF,cAAc,GAAID,IAAI,IAAK;IAC/B,IAAI7C,MAAM,CAAC2B,OAAO,EAAE;MAClB;MACAzB,cAAc,CAACgD,OAAO,CAACC,SAAS,IAAI;QAClCnD,MAAM,CAAC2B,OAAO,CAACyB,UAAU,CAACC,MAAM,CAACF,SAAS,CAAC;MAC7C,CAAC,CAAC;MACFhD,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEvB,MAAMmD,aAAa,GAAGT,IAAI,CAACU,GAAG,CAACC,IAAI,IAAI;QACrC,MAAM;UAAEC,OAAO;UAAEC;QAAO,CAAC,GAAGF,IAAI;QAChC,IAAIC,OAAO,IAAIA,OAAO,CAACE,WAAW,EAAE;UAClC,OAAOC,cAAc,CAACH,OAAO,CAACE,WAAW,EAAED,MAAM,EAAElD,eAAe,CAAC,CAAC,CAAC;QACvE;QACA,OAAO,IAAI;MACb,CAAC,CAAC,CAACqD,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC;MAElCR,aAAa,CAACJ,OAAO,CAACY,KAAK,IAAI;QAC7B9D,MAAM,CAAC2B,OAAO,CAACyB,UAAU,CAACpB,GAAG,CAAC8B,KAAK,CAAC;QACpC3D,iBAAiB,CAAC4D,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIC,QAAQ,IAAK;IACvCxD,kBAAkB,CAACwD,QAAQ,CAAC;IAC5BC,6BAA6B,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3C,CAAC;EAED,MAAMC,6BAA6B,GAAID,QAAQ,IAAK;IAClD/D,cAAc,CAACgD,OAAO,CAACC,SAAS,IAAI;MAClC,MAAMgB,UAAU,GAAGhB,SAAS,CAACgB,UAAU,CAACC,MAAM,CAAC,CAAC;MAChD,MAAMV,MAAM,GAAGW,UAAU,CAACF,UAAU,CAACG,cAAc,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrEpB,SAAS,CAACqB,OAAO,CAACC,GAAG,CAAC;QAAEC,SAAS,EAAEC,cAAc,CAACjB,MAAM,EAAEO,QAAQ,CAAC;QAAEpD,OAAO,EAAEoD,QAAQ,CAACpD;MAAQ,CAAC,CAAC,CAAC,CAAC;IACrG,CAAC,CAAC;EACJ,CAAC;EAED,MAAM+D,oBAAoB,GAAGA,CAAA,KAAM;IACjCvC,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC;EAED,oBACE1C,OAAA;IAAKkF,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBnF,OAAA;MAAKkF,SAAS,EAAC,QAAQ;MAAAC,QAAA,GAAC,gEAEtB,eAAAnF,OAAA;QACEoF,IAAI,EAAC,MAAM;QACXF,SAAS,EAAC,eAAe;QACzBG,QAAQ,EAAE3F;MAAsB;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACFzF,OAAA;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,wEAEN,eAAAzF,OAAA;QACEoF,IAAI,EAAC,MAAM;QACXF,SAAS,EAAC,eAAe;QACzBG,QAAQ,EAAE1F;MAAuB;QAAA2F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENzF,OAAA;MAAKkF,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBnF,OAAA;QAAKkF,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBnF,OAAA;UAAKkF,SAAS,EAAC,OAAO;UAACQ,OAAO,EAAEA,CAAA,KAAM7F,wBAAwB,CAACQ,MAAM,EAAEC,iBAAiB,CAAE;UAAA6E,QAAA,EAAC;QAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACjHzF,OAAA;UAAKkF,SAAS,EAAC,OAAO;UAACQ,OAAO,EAAEA,CAAA,KAAM9F,qBAAqB,CAACS,MAAM,EAAEE,cAAc,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,eAAe,CAAE;UAAAyE,QAAA,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1JzF,OAAA;UAAKkF,SAAS,EAAC,OAAO;UAACQ,OAAO,EAAEA,CAAA,KAAM9E,oBAAoB,CAAC,IAAI,CAAE;UAAAuE,QAAA,EAAC;QAAmB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxF,CAAC,eACNzF,OAAA;QAAKkF,SAAS,EAAC,KAAK;QAACS,EAAE,EAAC;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAGpCzF,OAAA,CAACF,aAAa;QACZ8F,MAAM,EAAEjF,iBAAkB;QAC1BkF,OAAO,EAAEA,CAAA,KAAMjF,oBAAoB,CAAC,KAAK,CAAE;QAC3CkF,cAAc,EAAEzB,kBAAmB;QACnC0B,gBAAgB,EAAEd;MAAqB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvF,EAAA,CA3IID,SAAS;AAAA+F,EAAA,GAAT/F,SAAS;AA6If,eAAeA,SAAS;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}