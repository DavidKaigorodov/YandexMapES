{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kakta\\\\Desktop\\\\YandexMap1212312\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport wellknown from 'wellknown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst handleFileInputChange = async event => {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post('http://localhost:5000/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error uploading file:', error);\n  }\n};\nconst handleFileInputChange2 = async event => {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post('http://localhost:5000/api/upload2', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error uploading file:', error);\n  }\n};\nconst YandexMap = () => {\n  _s();\n  const [mapInitiated, setMapInitiated] = useState(false);\n  const mapRef = useRef(null);\n  const objectsAdded = useRef(false);\n  const objectsAdded1 = useRef(false);\n  const stationPlacemarks = useRef([]);\n  const zoneRectangles = useRef([]);\n  useEffect(() => {\n    const apiKey = 'a0325676-108c-4a26-8b08-8ddbcf9ee724';\n    const initializeMap = () => {\n      // ... (код для инициализации карты)\n    };\n    initializeMap();\n  }, [mapInitiated]);\n  const handleStationButtonClick = () => {\n    // ... (код для отображения станций)\n  };\n  const fetchStationData = () => {\n    // ... (код для получения данных о станциях)\n  };\n  const handleZoneButtonClick = () => {\n    // ... (код для отображения зон)\n  };\n  const fetchZoneData = () => {\n    fetch('http://localhost:5000/api/Zone').then(response => response.json()).then(data => {\n      data.forEach(item => {\n        const {\n          polygon,\n          rating\n        } = item;\n\n        // Преобразование WKB в координаты, используя библиотеку 'wellknown'\n        const wkbHexString = Buffer.from(polygon).toString('hex'); // Преобразуем WKB в hex строку\n        const geoJSON = wellknown(`SRID=4326;POLYGON((${wkbHexString}))`);\n        if (geoJSON.type !== 'Polygon') {\n          throw new Error('Неподдерживаемый тип геометрии, ожидался полигон');\n        }\n        const coordinates = geoJSON.coordinates;\n        let color = 'rgba(0, 255, 0, 0.5)'; // Зеленый цвет по умолчанию\n        if (rating === 0) {\n          color = 'rgba(255, 0, 0, 0.5)'; // Красный цвет для rating = 0\n        } else if (rating > 0 && rating < 0.5) {\n          color = 'rgba(255, 165, 0, 0.5)'; // Оранжевый цвет для rating от 0 до 0.5\n        }\n        const polygonGeoObject = new window.ymaps.Polygon(coordinates, {}, {\n          fillColor: color,\n          strokeColor: '#0000ff',\n          opacity: 0.5\n        });\n        mapRef.current.geoObjects.add(polygonGeoObject);\n      });\n    }).catch(error => {\n      console.error('Ошибка при получении данных полигонов:', error);\n    });\n  };\n\n  // Преобразование WKB в координаты\n  function parseWKB(wkb) {\n    const wkbHexString = Buffer.from(wkb).toString('hex'); // Преобразуем WKB в hex строку\n    const geoJSON = wellknown(`SRID=4326;POLYGON((${wkbHexString}))`);\n    return geoJSON.coordinates;\n  }\n  const clearStations = () => {\n    stationPlacemarks.current.forEach(placemark => {\n      mapRef.current.geoObjects.remove(placemark);\n    });\n    stationPlacemarks.current = [];\n  };\n  const clearZones = () => {\n    zoneRectangles.current.forEach(rectangle => {\n      mapRef.current.geoObjects.remove(rectangle);\n    });\n    zoneRectangles.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0442\\u0435 \\u042D\\u0417\\u0421:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"header-button\",\n        onChange: handleFileInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0442\\u0435 \\u0437\\u043E\\u043D\\u044B:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"header-button\",\n        onChange: handleFileInputChange2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baton\",\n          onClick: handleStationButtonClick,\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0441\\u0442\\u0430\\u043D\\u0446\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baton\",\n          onClick: handleZoneButtonClick,\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0437\\u043E\\u043D\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map\",\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(YandexMap, \"h0OPqsNcYoT24h5ddw5rsLqm4vw=\");\n_c = YandexMap;\nexport default YandexMap;\nvar _c;\n$RefreshReg$(_c, \"YandexMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","wellknown","jsxDEV","_jsxDEV","handleFileInputChange","event","file","target","files","formData","FormData","append","response","post","headers","console","log","data","error","handleFileInputChange2","YandexMap","_s","mapInitiated","setMapInitiated","mapRef","objectsAdded","objectsAdded1","stationPlacemarks","zoneRectangles","apiKey","initializeMap","handleStationButtonClick","fetchStationData","handleZoneButtonClick","fetchZoneData","fetch","then","json","forEach","item","polygon","rating","wkbHexString","Buffer","from","toString","geoJSON","type","Error","coordinates","color","polygonGeoObject","window","ymaps","Polygon","fillColor","strokeColor","opacity","current","geoObjects","add","catch","parseWKB","wkb","clearStations","placemark","remove","clearZones","rectangle","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/kakta/Desktop/YandexMap1212312/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport wellknown from 'wellknown';\n\nconst handleFileInputChange = async (event) => {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await axios.post('http://localhost:5000/api/upload', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error uploading file:', error);\n  }\n};\n\nconst handleFileInputChange2 = async (event) => {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await axios.post('http://localhost:5000/api/upload2', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error uploading file:', error);\n  }\n};\n\nconst YandexMap = () => {\n  const [mapInitiated, setMapInitiated] = useState(false);\n  const mapRef = useRef(null);\n  const objectsAdded = useRef(false);\n  const objectsAdded1 = useRef(false);\n  const stationPlacemarks = useRef([]);\n  const zoneRectangles = useRef([]);\n\n  useEffect(() => {\n    const apiKey = 'a0325676-108c-4a26-8b08-8ddbcf9ee724';\n\n    const initializeMap = () => {\n      // ... (код для инициализации карты)\n    };\n\n    initializeMap();\n  }, [mapInitiated]);\n\n  const handleStationButtonClick = () => {\n    // ... (код для отображения станций)\n  };\n\n  const fetchStationData = () => {\n    // ... (код для получения данных о станциях)\n  };\n\n  const handleZoneButtonClick = () => {\n    // ... (код для отображения зон)\n  };\n\n  const fetchZoneData = () => {\n    fetch('http://localhost:5000/api/Zone')\n      .then(response => response.json())\n      .then(data => {\n        data.forEach(item => {\n          const { polygon, rating } = item;\n\n          // Преобразование WKB в координаты, используя библиотеку 'wellknown'\n          const wkbHexString = Buffer.from(polygon).toString('hex'); // Преобразуем WKB в hex строку\n          const geoJSON = wellknown(`SRID=4326;POLYGON((${wkbHexString}))`);\n\n          if (geoJSON.type !== 'Polygon') {\n            throw new Error('Неподдерживаемый тип геометрии, ожидался полигон');\n          }\n\n          const coordinates = geoJSON.coordinates;\n\n          let color = 'rgba(0, 255, 0, 0.5)'; // Зеленый цвет по умолчанию\n          if (rating === 0) {\n            color = 'rgba(255, 0, 0, 0.5)'; // Красный цвет для rating = 0\n          } else if (rating > 0 && rating < 0.5) {\n            color = 'rgba(255, 165, 0, 0.5)'; // Оранжевый цвет для rating от 0 до 0.5\n          }\n\n  \n          const polygonGeoObject = new window.ymaps.Polygon(coordinates, {}, {\n            fillColor: color,\n            strokeColor: '#0000ff',\n            opacity: 0.5,\n          });\n  \n          mapRef.current.geoObjects.add(polygonGeoObject);\n        });\n      })\n      .catch(error => {\n        console.error('Ошибка при получении данных полигонов:', error);\n      });\n  };\n  \n  // Преобразование WKB в координаты\n  function parseWKB(wkb) {\n    const wkbHexString = Buffer.from(wkb).toString('hex'); // Преобразуем WKB в hex строку\n    const geoJSON = wellknown(`SRID=4326;POLYGON((${wkbHexString}))`);\n  \n    return geoJSON.coordinates;\n  }\n  \n  \n\n\n  const clearStations = () => {\n    stationPlacemarks.current.forEach((placemark) => {\n      mapRef.current.geoObjects.remove(placemark);\n    });\n    stationPlacemarks.current = [];\n  };\n  \n  const clearZones = () => {\n    zoneRectangles.current.forEach((rectangle) => {\n      mapRef.current.geoObjects.remove(rectangle);\n    });\n    zoneRectangles.current = [];\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">Добавте ЭЗС:\n      <input\n          type=\"file\"\n          className=\"header-button\"\n          onChange={handleFileInputChange}\n          \n        />\n        <br></br>\n        Добавте зоны:\n        <input\n          type=\"file\"\n          className=\"header-button\"\n          onChange={handleFileInputChange2}\n          \n        />\n      </div>\n      <div className='content'>\n      <div className=\"controls\">\n        <div className='baton' onClick={handleStationButtonClick}>Показать станции</div>\n        <div className='baton' onClick={handleZoneButtonClick}>Показать зоны</div>\n      </div>\n      <div className=\"map\" id=\"map\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default YandexMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}