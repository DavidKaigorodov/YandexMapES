{"ast":null,"code":"const handleZoneButtonClick = (mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded) => {\n  if (!objectsAdded) {\n    fetchZoneData(mapRef, setZoneRectangles);\n    setObjectsAdded(true);\n  } else {\n    clearZones(mapRef, zoneRectangles, setZoneRectangles);\n    setObjectsAdded(false);\n  }\n};\nconst clearZones = (mapRef, zoneRectangles, setZoneRectangles) => {\n  if (mapRef.current) {\n    zoneRectangles.forEach(rectangle => {\n      mapRef.current.geoObjects.remove(rectangle);\n    });\n    setZoneRectangles([]);\n  }\n};\nconst fetchZoneData = (mapRef, setZoneRectangles, settings) => {\n  fetch('http://localhost:5000/api/Zone').then(response => response.json()).then(data => {\n    const polygonLayers = data.map(item => {\n      const {\n        polygon,\n        rating\n      } = item;\n      if (polygon && polygon.coordinates) {\n        return processPolygon(polygon.coordinates, rating, settings); // Передаем настройки\n      } else {\n        console.error('Некорректные данные полигона:', item);\n        return null;\n      }\n    }).filter(layer => layer !== null);\n    if (mapRef.current) {\n      const newZoneRectangles = [];\n      polygonLayers.forEach(layer => {\n        mapRef.current.geoObjects.add(layer);\n        newZoneRectangles.push(layer);\n      });\n      setZoneRectangles(newZoneRectangles);\n    }\n  }).catch(error => {\n    console.error('Ошибка при получении данных полигонов:', error);\n  });\n};\nconst processPolygon = (coordinates, rating, settings) => {\n  const color = getRatingColor(rating, settings); // Изменение цвета в зависимости от настроек\n  try {\n    return new window.ymaps.GeoObject({\n      geometry: {\n        type: 'Polygon',\n        coordinates: coordinates.map(coord => coord.reverse())\n      },\n      properties: {\n        hintContent: `Рейтинг: ${rating}`,\n        balloonContent: `Рейтинг: ${rating}`\n      }\n    }, {\n      fillColor: color,\n      strokeColor: '#0000ff',\n      opacity: settings.opacity // Используем прозрачность из настроек\n    });\n  } catch (error) {\n    console.error('Ошибка при создании полигона:', error);\n    return null;\n  }\n};\nconst getRatingColor = (rating, settings) => {\n  if (rating === 0) {\n    return settings.color0; // Используем цвет для рейтинга 0\n  } else if (rating > 0 && rating <= 0.5) {\n    return settings.color0_5; // Используем цвет для рейтинга от 0 до 0.5\n  } else {\n    return settings.color5; // Используем цвет для рейтинга 5 и выше\n  }\n};\nexport { handleZoneButtonClick, clearZones, fetchZoneData, processPolygon, getRatingColor };","map":{"version":3,"names":["handleZoneButtonClick","mapRef","zoneRectangles","setZoneRectangles","objectsAdded","setObjectsAdded","fetchZoneData","clearZones","current","forEach","rectangle","geoObjects","remove","settings","fetch","then","response","json","data","polygonLayers","map","item","polygon","rating","coordinates","processPolygon","console","error","filter","layer","newZoneRectangles","add","push","catch","color","getRatingColor","window","ymaps","GeoObject","geometry","type","coord","reverse","properties","hintContent","balloonContent","fillColor","strokeColor","opacity","color0","color0_5","color5"],"sources":["C:/Users/Disve/Desktop/YandexMap ES/client/src/zoneHandler.js"],"sourcesContent":["const handleZoneButtonClick = (mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded) => {\r\n    if (!objectsAdded) {\r\n      fetchZoneData(mapRef, setZoneRectangles);\r\n      setObjectsAdded(true);\r\n    } else {\r\n      clearZones(mapRef, zoneRectangles, setZoneRectangles);\r\n      setObjectsAdded(false);\r\n    }\r\n  };\r\n  \r\n  \r\n  const clearZones = (mapRef, zoneRectangles, setZoneRectangles) => {\r\n    if (mapRef.current) {\r\n      zoneRectangles.forEach((rectangle) => {\r\n        mapRef.current.geoObjects.remove(rectangle);\r\n      });\r\n      setZoneRectangles([]);\r\n    }\r\n  };\r\n  \r\n  const fetchZoneData = (mapRef, setZoneRectangles, settings) => {\r\n    fetch('http://localhost:5000/api/Zone')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const polygonLayers = data.map(item => {\r\n          const { polygon, rating } = item;\r\n          if (polygon && polygon.coordinates) {\r\n            return processPolygon(polygon.coordinates, rating, settings); // Передаем настройки\r\n          } else {\r\n            console.error('Некорректные данные полигона:', item);\r\n            return null;\r\n          }\r\n        }).filter(layer => layer !== null);\r\n  \r\n        if (mapRef.current) {\r\n          const newZoneRectangles = [];\r\n  \r\n          polygonLayers.forEach(layer => {\r\n            mapRef.current.geoObjects.add(layer);\r\n            newZoneRectangles.push(layer);\r\n          });\r\n  \r\n          setZoneRectangles(newZoneRectangles);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Ошибка при получении данных полигонов:', error);\r\n      });\r\n  };\r\n  \r\n  const processPolygon = (coordinates, rating, settings) => {\r\n    const color = getRatingColor(rating, settings); // Изменение цвета в зависимости от настроек\r\n    try {\r\n      return new window.ymaps.GeoObject({\r\n        geometry: {\r\n          type: 'Polygon',\r\n          coordinates: coordinates.map(coord => coord.reverse()),\r\n        },\r\n        properties: {\r\n          hintContent: `Рейтинг: ${rating}`,\r\n          balloonContent: `Рейтинг: ${rating}`,\r\n        },\r\n      }, {\r\n        fillColor: color,\r\n        strokeColor: '#0000ff',\r\n        opacity: settings.opacity, // Используем прозрачность из настроек\r\n      });\r\n    } catch (error) {\r\n      console.error('Ошибка при создании полигона:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const getRatingColor = (rating, settings) => {\r\n    if (rating === 0) {\r\n      return settings.color0; // Используем цвет для рейтинга 0\r\n    } else if (rating > 0 && rating <= 0.5) {\r\n      return settings.color0_5; // Используем цвет для рейтинга от 0 до 0.5\r\n    } else {\r\n      return settings.color5; // Используем цвет для рейтинга 5 и выше\r\n    }\r\n  };\r\n  \r\n  export { handleZoneButtonClick, clearZones, fetchZoneData, processPolygon, getRatingColor };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}