{"ast":null,"code":"const handleZoneButtonClick = (mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded, settings) => {\n  if (!objectsAdded) {\n    fetchZoneData(mapRef, setZoneRectangles, settings);\n    setObjectsAdded(true);\n  } else {\n    clearZones(mapRef, zoneRectangles, setZoneRectangles);\n    setObjectsAdded(false);\n  }\n};\nconst clearZones = (mapRef, zoneRectangles, setZoneRectangles) => {\n  if (mapRef.current) {\n    zoneRectangles.forEach(rectangle => {\n      mapRef.current.geoObjects.remove(rectangle);\n    });\n    setZoneRectangles([]);\n  }\n};\nconst fetchZoneData = (mapRef, setZoneRectangles, settings) => {\n  fetch('http://localhost:5000/api/Zone').then(response => response.json()).then(data => {\n    const polygonLayers = data.map(item => {\n      const {\n        polygon,\n        rating\n      } = item;\n      if (polygon && polygon.coordinates) {\n        // Меняем местами долготу и широту\n        const swappedCoordinates = polygon.coordinates.map(coord => coord.map(([lon, lat]) => [lat, lon]) // Поменять местами\n        );\n        return processPolygon(swappedCoordinates, rating, settings); // Передаем переменные\n      } else {\n        console.error('Некорректные данные полигона:', item);\n        return null;\n      }\n    }).filter(layer => layer !== null);\n    if (mapRef.current) {\n      const newZoneRectangles = [];\n      polygonLayers.forEach(layer => {\n        mapRef.current.geoObjects.add(layer);\n        newZoneRectangles.push(layer);\n      });\n      setZoneRectangles(newZoneRectangles);\n    }\n  }).catch(error => {\n    console.error('Ошибка при получении данных полигонов:', error);\n  });\n};\nconst processPolygon = (coordinates, rating, settings) => {\n  const color = getRatingColor(rating, settings); // Изменение цвета в зависимости от настроек\n  try {\n    return new window.ymaps.GeoObject({\n      geometry: {\n        type: 'Polygon',\n        coordinates: coordinates\n      },\n      properties: {\n        hintContent: `Рейтинг: ${rating}`,\n        balloonContent: `Рейтинг: ${rating}`\n      }\n    }, {\n      fillColor: color,\n      strokeColor: '#0000ff',\n      opacity: settings.opacity // Используем прозрачность из настроек\n    });\n  } catch (error) {\n    console.error('Ошибка при создании полигона:', error);\n    return null;\n  }\n};\nconst getRatingColor = (rating, settings) => {\n  if (rating === 0) {\n    return settings.color0; // Используем цвет для рейтинга 0\n  } else if (rating > 0 && rating <= 0.5) {\n    return settings.color0_5; // Используем цвет для рейтинга от 0 до 0.5\n  } else {\n    return settings.color5; // Используем цвет для рейтинга 5 и выше\n  }\n};\nexport { handleZoneButtonClick, clearZones, fetchZoneData, processPolygon, getRatingColor };","map":{"version":3,"names":["handleZoneButtonClick","mapRef","zoneRectangles","setZoneRectangles","objectsAdded","setObjectsAdded","settings","fetchZoneData","clearZones","current","forEach","rectangle","geoObjects","remove","fetch","then","response","json","data","polygonLayers","map","item","polygon","rating","coordinates","swappedCoordinates","coord","lon","lat","processPolygon","console","error","filter","layer","newZoneRectangles","add","push","catch","color","getRatingColor","window","ymaps","GeoObject","geometry","type","properties","hintContent","balloonContent","fillColor","strokeColor","opacity","color0","color0_5","color5"],"sources":["C:/Users/Disve/Desktop/YandexMap ES/client/src/zoneHandler.js"],"sourcesContent":["const handleZoneButtonClick = (mapRef, zoneRectangles, setZoneRectangles, objectsAdded, setObjectsAdded, settings) => {\r\n  if (!objectsAdded) {\r\n      fetchZoneData(mapRef, setZoneRectangles, settings);\r\n      setObjectsAdded(true);\r\n  } else {\r\n      clearZones(mapRef, zoneRectangles, setZoneRectangles);\r\n      setObjectsAdded(false);\r\n  }\r\n};\r\n\r\nconst clearZones = (mapRef, zoneRectangles, setZoneRectangles) => {\r\n  if (mapRef.current) {\r\n      zoneRectangles.forEach((rectangle) => {\r\n          mapRef.current.geoObjects.remove(rectangle);\r\n      });\r\n      setZoneRectangles([]);\r\n  }\r\n};\r\n\r\nconst fetchZoneData = (mapRef, setZoneRectangles, settings) => {\r\n  fetch('http://localhost:5000/api/Zone')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          const polygonLayers = data.map(item => {\r\n              const { polygon, rating } = item;\r\n\r\n              if (polygon && polygon.coordinates) {\r\n                  // Меняем местами долготу и широту\r\n                  const swappedCoordinates = polygon.coordinates.map(coord => \r\n                      coord.map(([lon, lat]) => [lat, lon]) // Поменять местами\r\n                  );\r\n\r\n                  return processPolygon(swappedCoordinates, rating, settings); // Передаем переменные\r\n              } else {\r\n                  console.error('Некорректные данные полигона:', item);\r\n                  return null;\r\n              }\r\n          }).filter(layer => layer !== null);\r\n\r\n          if (mapRef.current) {\r\n              const newZoneRectangles = [];\r\n              polygonLayers.forEach(layer => {\r\n                  mapRef.current.geoObjects.add(layer);\r\n                  newZoneRectangles.push(layer);\r\n              });\r\n\r\n              setZoneRectangles(newZoneRectangles);\r\n          }\r\n      })\r\n      .catch(error => {\r\n          console.error('Ошибка при получении данных полигонов:', error);\r\n      });\r\n};\r\n\r\nconst processPolygon = (coordinates, rating, settings) => {\r\n  const color = getRatingColor(rating, settings); // Изменение цвета в зависимости от настроек\r\n  try {\r\n      return new window.ymaps.GeoObject({\r\n          geometry: {\r\n              type: 'Polygon',\r\n              coordinates: coordinates,\r\n          },\r\n          properties: {\r\n              hintContent: `Рейтинг: ${rating}`,\r\n              balloonContent: `Рейтинг: ${rating}`,\r\n          },\r\n      }, {\r\n          fillColor: color,\r\n          strokeColor: '#0000ff',\r\n          opacity: settings.opacity, // Используем прозрачность из настроек\r\n      });\r\n  } catch (error) {\r\n      console.error('Ошибка при создании полигона:', error);\r\n      return null;\r\n  }\r\n};\r\n\r\nconst getRatingColor = (rating, settings) => {\r\n  if (rating === 0) {\r\n      return settings.color0; // Используем цвет для рейтинга 0\r\n  } else if (rating > 0 && rating <= 0.5) {\r\n      return settings.color0_5; // Используем цвет для рейтинга от 0 до 0.5\r\n  } else {\r\n      return settings.color5; // Используем цвет для рейтинга 5 и выше\r\n  }\r\n};\r\n\r\nexport { handleZoneButtonClick, clearZones, fetchZoneData, processPolygon, getRatingColor };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}