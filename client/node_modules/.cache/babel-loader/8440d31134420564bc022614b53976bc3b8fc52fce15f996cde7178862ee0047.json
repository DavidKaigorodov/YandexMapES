{"ast":null,"code":"export const handleStationButtonClick = (mapRef, stationPlacemarks, filters) => {\n  if (stationPlacemarks.current.length === 0) {\n    fetchStationData(mapRef, stationPlacemarks, filters);\n  } else {\n    clearStations(mapRef, stationPlacemarks);\n  }\n};\nconst fetchStationData = (mapRef, stationPlacemarks, filters) => {\n  fetch('http://localhost:5000/api/Station').then(response => response.json()).then(data => {\n    // Фильтрация данных в зависимости от выбранных критериев\n    const filteredData = data.filter(coord => {\n      const matchesAll = filters.includes('all');\n      const matchesConnector = filters.includes(`${coord.connectors_total}`);\n      const matchesSpeed = coord.evse_type === 0 && filters.includes('slow') || coord.evse_type === 1 && filters.includes('fast');\n      return matchesAll || matchesConnector || matchesSpeed;\n    });\n    filteredData.forEach(coord => {\n      const placemark = new window.ymaps.Placemark([coord.latitude, coord.longitude], {\n        hintContent: coord.adress\n      });\n      stationPlacemarks.current.push(placemark);\n      mapRef.current.geoObjects.add(placemark);\n    });\n  }).catch(error => {\n    console.error('Error fetching station data:', error);\n  });\n};\nconst clearStations = (mapRef, objectsAdded1) => {\n  objectsAdded1.current.forEach(placemark => {\n    mapRef.current.geoObjects.remove(placemark);\n  });\n  objectsAdded1.current = [];\n};","map":{"version":3,"names":["handleStationButtonClick","mapRef","stationPlacemarks","filters","current","length","fetchStationData","clearStations","fetch","then","response","json","data","filteredData","filter","coord","matchesAll","includes","matchesConnector","connectors_total","matchesSpeed","evse_type","forEach","placemark","window","ymaps","Placemark","latitude","longitude","hintContent","adress","push","geoObjects","add","catch","error","console","objectsAdded1","remove"],"sources":["C:/Users/Disve/Desktop/YandexMap ES/client/src/StationHandler.js"],"sourcesContent":["export const handleStationButtonClick = (mapRef, stationPlacemarks, filters) => {\r\n  if (stationPlacemarks.current.length === 0) {\r\n      fetchStationData(mapRef, stationPlacemarks, filters);\r\n  } else {\r\n      clearStations(mapRef, stationPlacemarks);\r\n  }\r\n};\r\n\r\nconst fetchStationData = (mapRef, stationPlacemarks, filters) => {\r\n  fetch('http://localhost:5000/api/Station')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          // Фильтрация данных в зависимости от выбранных критериев\r\n          const filteredData = data.filter(coord => {\r\n              const matchesAll = filters.includes('all');\r\n              const matchesConnector = filters.includes(`${coord.connectors_total}`);\r\n              const matchesSpeed = (coord.evse_type === 0 && filters.includes('slow')) || \r\n                                   (coord.evse_type === 1 && filters.includes('fast'));\r\n              \r\n              return matchesAll || matchesConnector || matchesSpeed;\r\n          });\r\n\r\n          filteredData.forEach(coord => {\r\n              const placemark = new window.ymaps.Placemark(\r\n                  [coord.latitude, coord.longitude],\r\n                  { hintContent: coord.adress }\r\n              );\r\n\r\n              stationPlacemarks.current.push(placemark);\r\n              mapRef.current.geoObjects.add(placemark);\r\n          });\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching station data:', error);\r\n      });\r\n};\r\n\r\n  \r\n  const clearStations = (mapRef, objectsAdded1) => {\r\n    objectsAdded1.current.forEach((placemark) => {\r\n      mapRef.current.geoObjects.remove(placemark);\r\n    });\r\n    objectsAdded1.current = [];\r\n  };\r\n\r\n  "],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,KAAK;EAC9E,IAAID,iBAAiB,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACxCC,gBAAgB,CAACL,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,CAAC;EACxD,CAAC,MAAM;IACHI,aAAa,CAACN,MAAM,EAAEC,iBAAiB,CAAC;EAC5C;AACF,CAAC;AAED,MAAMI,gBAAgB,GAAGA,CAACL,MAAM,EAAEC,iBAAiB,EAAEC,OAAO,KAAK;EAC/DK,KAAK,CAAC,mCAAmC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV;IACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,MAAM,CAACC,KAAK,IAAI;MACtC,MAAMC,UAAU,GAAGb,OAAO,CAACc,QAAQ,CAAC,KAAK,CAAC;MAC1C,MAAMC,gBAAgB,GAAGf,OAAO,CAACc,QAAQ,CAAC,GAAGF,KAAK,CAACI,gBAAgB,EAAE,CAAC;MACtE,MAAMC,YAAY,GAAIL,KAAK,CAACM,SAAS,KAAK,CAAC,IAAIlB,OAAO,CAACc,QAAQ,CAAC,MAAM,CAAC,IACjDF,KAAK,CAACM,SAAS,KAAK,CAAC,IAAIlB,OAAO,CAACc,QAAQ,CAAC,MAAM,CAAE;MAExE,OAAOD,UAAU,IAAIE,gBAAgB,IAAIE,YAAY;IACzD,CAAC,CAAC;IAEFP,YAAY,CAACS,OAAO,CAACP,KAAK,IAAI;MAC1B,MAAMQ,SAAS,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,SAAS,CACxC,CAACX,KAAK,CAACY,QAAQ,EAAEZ,KAAK,CAACa,SAAS,CAAC,EACjC;QAAEC,WAAW,EAAEd,KAAK,CAACe;MAAO,CAChC,CAAC;MAED5B,iBAAiB,CAACE,OAAO,CAAC2B,IAAI,CAACR,SAAS,CAAC;MACzCtB,MAAM,CAACG,OAAO,CAAC4B,UAAU,CAACC,GAAG,CAACV,SAAS,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC,CAAC,CACDW,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACxD,CAAC,CAAC;AACR,CAAC;AAGC,MAAM5B,aAAa,GAAGA,CAACN,MAAM,EAAEoC,aAAa,KAAK;EAC/CA,aAAa,CAACjC,OAAO,CAACkB,OAAO,CAAEC,SAAS,IAAK;IAC3CtB,MAAM,CAACG,OAAO,CAAC4B,UAAU,CAACM,MAAM,CAACf,SAAS,CAAC;EAC7C,CAAC,CAAC;EACFc,aAAa,CAACjC,OAAO,GAAG,EAAE;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}